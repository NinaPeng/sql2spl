# Generated from sql2spl/parser/Sql.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys

if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,
        1,
        50,
        386,
        2,
        0,
        7,
        0,
        2,
        1,
        7,
        1,
        2,
        2,
        7,
        2,
        2,
        3,
        7,
        3,
        2,
        4,
        7,
        4,
        2,
        5,
        7,
        5,
        2,
        6,
        7,
        6,
        2,
        7,
        7,
        7,
        2,
        8,
        7,
        8,
        2,
        9,
        7,
        9,
        2,
        10,
        7,
        10,
        2,
        11,
        7,
        11,
        2,
        12,
        7,
        12,
        2,
        13,
        7,
        13,
        2,
        14,
        7,
        14,
        2,
        15,
        7,
        15,
        2,
        16,
        7,
        16,
        2,
        17,
        7,
        17,
        2,
        18,
        7,
        18,
        2,
        19,
        7,
        19,
        2,
        20,
        7,
        20,
        2,
        21,
        7,
        21,
        2,
        22,
        7,
        22,
        2,
        23,
        7,
        23,
        2,
        24,
        7,
        24,
        2,
        25,
        7,
        25,
        2,
        26,
        7,
        26,
        2,
        27,
        7,
        27,
        2,
        28,
        7,
        28,
        2,
        29,
        7,
        29,
        2,
        30,
        7,
        30,
        2,
        31,
        7,
        31,
        2,
        32,
        7,
        32,
        2,
        33,
        7,
        33,
        2,
        34,
        7,
        34,
        2,
        35,
        7,
        35,
        2,
        36,
        7,
        36,
        2,
        37,
        7,
        37,
        2,
        38,
        7,
        38,
        2,
        39,
        7,
        39,
        2,
        40,
        7,
        40,
        2,
        41,
        7,
        41,
        2,
        42,
        7,
        42,
        2,
        43,
        7,
        43,
        2,
        44,
        7,
        44,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        5,
        0,
        95,
        8,
        0,
        10,
        0,
        12,
        0,
        98,
        9,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        3,
        1,
        103,
        8,
        1,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        3,
        2,
        110,
        8,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        3,
        2,
        120,
        8,
        2,
        1,
        2,
        3,
        2,
        123,
        8,
        2,
        1,
        2,
        3,
        2,
        126,
        8,
        2,
        1,
        3,
        1,
        3,
        1,
        3,
        5,
        3,
        131,
        8,
        3,
        10,
        3,
        12,
        3,
        134,
        9,
        3,
        1,
        4,
        1,
        4,
        1,
        4,
        3,
        4,
        139,
        8,
        4,
        1,
        4,
        3,
        4,
        142,
        8,
        4,
        1,
        4,
        1,
        4,
        3,
        4,
        146,
        8,
        4,
        1,
        4,
        3,
        4,
        149,
        8,
        4,
        1,
        4,
        1,
        4,
        3,
        4,
        153,
        8,
        4,
        3,
        4,
        155,
        8,
        4,
        1,
        5,
        1,
        5,
        1,
        5,
        1,
        5,
        3,
        5,
        161,
        8,
        5,
        1,
        5,
        1,
        5,
        1,
        6,
        1,
        6,
        1,
        6,
        1,
        6,
        1,
        6,
        1,
        7,
        1,
        7,
        1,
        7,
        5,
        7,
        173,
        8,
        7,
        10,
        7,
        12,
        7,
        176,
        9,
        7,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        3,
        8,
        183,
        8,
        8,
        1,
        9,
        1,
        9,
        1,
        10,
        1,
        10,
        1,
        10,
        5,
        10,
        190,
        8,
        10,
        10,
        10,
        12,
        10,
        193,
        9,
        10,
        1,
        11,
        1,
        11,
        1,
        12,
        1,
        12,
        1,
        12,
        1,
        13,
        1,
        13,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        14,
        3,
        14,
        208,
        8,
        14,
        1,
        15,
        1,
        15,
        1,
        15,
        1,
        15,
        1,
        15,
        1,
        15,
        5,
        15,
        216,
        8,
        15,
        10,
        15,
        12,
        15,
        219,
        9,
        15,
        3,
        15,
        221,
        8,
        15,
        1,
        16,
        1,
        16,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        19,
        1,
        19,
        1,
        19,
        5,
        19,
        239,
        8,
        19,
        10,
        19,
        12,
        19,
        242,
        9,
        19,
        1,
        20,
        1,
        20,
        1,
        20,
        5,
        20,
        247,
        8,
        20,
        10,
        20,
        12,
        20,
        250,
        9,
        20,
        1,
        21,
        1,
        21,
        1,
        21,
        3,
        21,
        255,
        8,
        21,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        3,
        22,
        262,
        8,
        22,
        1,
        23,
        1,
        23,
        1,
        23,
        1,
        23,
        1,
        23,
        3,
        23,
        269,
        8,
        23,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        24,
        5,
        24,
        276,
        8,
        24,
        10,
        24,
        12,
        24,
        279,
        9,
        24,
        1,
        24,
        1,
        24,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        3,
        25,
        291,
        8,
        25,
        3,
        25,
        293,
        8,
        25,
        1,
        26,
        1,
        26,
        3,
        26,
        297,
        8,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        28,
        1,
        28,
        1,
        28,
        5,
        28,
        313,
        8,
        28,
        10,
        28,
        12,
        28,
        316,
        9,
        28,
        1,
        29,
        1,
        29,
        3,
        29,
        320,
        8,
        29,
        1,
        30,
        1,
        30,
        3,
        30,
        324,
        8,
        30,
        1,
        31,
        1,
        31,
        1,
        32,
        1,
        32,
        1,
        33,
        1,
        33,
        1,
        33,
        1,
        33,
        3,
        33,
        334,
        8,
        33,
        1,
        34,
        1,
        34,
        1,
        35,
        1,
        35,
        1,
        36,
        1,
        36,
        1,
        36,
        1,
        36,
        1,
        36,
        1,
        36,
        3,
        36,
        346,
        8,
        36,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        38,
        1,
        38,
        1,
        38,
        5,
        38,
        355,
        8,
        38,
        10,
        38,
        12,
        38,
        358,
        9,
        38,
        1,
        39,
        1,
        39,
        1,
        39,
        1,
        39,
        1,
        39,
        5,
        39,
        365,
        8,
        39,
        10,
        39,
        12,
        39,
        368,
        9,
        39,
        1,
        40,
        1,
        40,
        3,
        40,
        372,
        8,
        40,
        1,
        41,
        1,
        41,
        1,
        42,
        1,
        42,
        1,
        42,
        1,
        42,
        1,
        42,
        1,
        43,
        1,
        43,
        1,
        44,
        1,
        44,
        1,
        44,
        1,
        44,
        0,
        0,
        45,
        0,
        2,
        4,
        6,
        8,
        10,
        12,
        14,
        16,
        18,
        20,
        22,
        24,
        26,
        28,
        30,
        32,
        34,
        36,
        38,
        40,
        42,
        44,
        46,
        48,
        50,
        52,
        54,
        56,
        58,
        60,
        62,
        64,
        66,
        68,
        70,
        72,
        74,
        76,
        78,
        80,
        82,
        84,
        86,
        88,
        0,
        4,
        1,
        0,
        14,
        15,
        1,
        0,
        29,
        30,
        1,
        0,
        20,
        21,
        1,
        0,
        32,
        38,
        388,
        0,
        90,
        1,
        0,
        0,
        0,
        2,
        102,
        1,
        0,
        0,
        0,
        4,
        104,
        1,
        0,
        0,
        0,
        6,
        127,
        1,
        0,
        0,
        0,
        8,
        154,
        1,
        0,
        0,
        0,
        10,
        156,
        1,
        0,
        0,
        0,
        12,
        164,
        1,
        0,
        0,
        0,
        14,
        169,
        1,
        0,
        0,
        0,
        16,
        182,
        1,
        0,
        0,
        0,
        18,
        184,
        1,
        0,
        0,
        0,
        20,
        186,
        1,
        0,
        0,
        0,
        22,
        194,
        1,
        0,
        0,
        0,
        24,
        196,
        1,
        0,
        0,
        0,
        26,
        199,
        1,
        0,
        0,
        0,
        28,
        207,
        1,
        0,
        0,
        0,
        30,
        209,
        1,
        0,
        0,
        0,
        32,
        222,
        1,
        0,
        0,
        0,
        34,
        224,
        1,
        0,
        0,
        0,
        36,
        232,
        1,
        0,
        0,
        0,
        38,
        235,
        1,
        0,
        0,
        0,
        40,
        243,
        1,
        0,
        0,
        0,
        42,
        254,
        1,
        0,
        0,
        0,
        44,
        261,
        1,
        0,
        0,
        0,
        46,
        268,
        1,
        0,
        0,
        0,
        48,
        270,
        1,
        0,
        0,
        0,
        50,
        292,
        1,
        0,
        0,
        0,
        52,
        294,
        1,
        0,
        0,
        0,
        54,
        303,
        1,
        0,
        0,
        0,
        56,
        309,
        1,
        0,
        0,
        0,
        58,
        319,
        1,
        0,
        0,
        0,
        60,
        323,
        1,
        0,
        0,
        0,
        62,
        325,
        1,
        0,
        0,
        0,
        64,
        327,
        1,
        0,
        0,
        0,
        66,
        333,
        1,
        0,
        0,
        0,
        68,
        335,
        1,
        0,
        0,
        0,
        70,
        337,
        1,
        0,
        0,
        0,
        72,
        345,
        1,
        0,
        0,
        0,
        74,
        347,
        1,
        0,
        0,
        0,
        76,
        351,
        1,
        0,
        0,
        0,
        78,
        359,
        1,
        0,
        0,
        0,
        80,
        369,
        1,
        0,
        0,
        0,
        82,
        373,
        1,
        0,
        0,
        0,
        84,
        375,
        1,
        0,
        0,
        0,
        86,
        380,
        1,
        0,
        0,
        0,
        88,
        382,
        1,
        0,
        0,
        0,
        90,
        96,
        3,
        4,
        2,
        0,
        91,
        92,
        3,
        2,
        1,
        0,
        92,
        93,
        3,
        4,
        2,
        0,
        93,
        95,
        1,
        0,
        0,
        0,
        94,
        91,
        1,
        0,
        0,
        0,
        95,
        98,
        1,
        0,
        0,
        0,
        96,
        94,
        1,
        0,
        0,
        0,
        96,
        97,
        1,
        0,
        0,
        0,
        97,
        1,
        1,
        0,
        0,
        0,
        98,
        96,
        1,
        0,
        0,
        0,
        99,
        103,
        5,
        12,
        0,
        0,
        100,
        101,
        5,
        12,
        0,
        0,
        101,
        103,
        5,
        10,
        0,
        0,
        102,
        99,
        1,
        0,
        0,
        0,
        102,
        100,
        1,
        0,
        0,
        0,
        103,
        3,
        1,
        0,
        0,
        0,
        104,
        105,
        5,
        1,
        0,
        0,
        105,
        106,
        3,
        6,
        3,
        0,
        106,
        107,
        5,
        3,
        0,
        0,
        107,
        109,
        3,
        28,
        14,
        0,
        108,
        110,
        3,
        36,
        18,
        0,
        109,
        108,
        1,
        0,
        0,
        0,
        109,
        110,
        1,
        0,
        0,
        0,
        110,
        119,
        1,
        0,
        0,
        0,
        111,
        120,
        3,
        74,
        37,
        0,
        112,
        113,
        3,
        74,
        37,
        0,
        113,
        114,
        3,
        84,
        42,
        0,
        114,
        120,
        1,
        0,
        0,
        0,
        115,
        120,
        3,
        84,
        42,
        0,
        116,
        117,
        3,
        84,
        42,
        0,
        117,
        118,
        3,
        74,
        37,
        0,
        118,
        120,
        1,
        0,
        0,
        0,
        119,
        111,
        1,
        0,
        0,
        0,
        119,
        112,
        1,
        0,
        0,
        0,
        119,
        115,
        1,
        0,
        0,
        0,
        119,
        116,
        1,
        0,
        0,
        0,
        119,
        120,
        1,
        0,
        0,
        0,
        120,
        122,
        1,
        0,
        0,
        0,
        121,
        123,
        3,
        78,
        39,
        0,
        122,
        121,
        1,
        0,
        0,
        0,
        122,
        123,
        1,
        0,
        0,
        0,
        123,
        125,
        1,
        0,
        0,
        0,
        124,
        126,
        3,
        88,
        44,
        0,
        125,
        124,
        1,
        0,
        0,
        0,
        125,
        126,
        1,
        0,
        0,
        0,
        126,
        5,
        1,
        0,
        0,
        0,
        127,
        132,
        3,
        8,
        4,
        0,
        128,
        129,
        5,
        27,
        0,
        0,
        129,
        131,
        3,
        8,
        4,
        0,
        130,
        128,
        1,
        0,
        0,
        0,
        131,
        134,
        1,
        0,
        0,
        0,
        132,
        130,
        1,
        0,
        0,
        0,
        132,
        133,
        1,
        0,
        0,
        0,
        133,
        7,
        1,
        0,
        0,
        0,
        134,
        132,
        1,
        0,
        0,
        0,
        135,
        155,
        5,
        26,
        0,
        0,
        136,
        138,
        3,
        10,
        5,
        0,
        137,
        139,
        3,
        24,
        12,
        0,
        138,
        137,
        1,
        0,
        0,
        0,
        138,
        139,
        1,
        0,
        0,
        0,
        139,
        155,
        1,
        0,
        0,
        0,
        140,
        142,
        3,
        18,
        9,
        0,
        141,
        140,
        1,
        0,
        0,
        0,
        141,
        142,
        1,
        0,
        0,
        0,
        142,
        143,
        1,
        0,
        0,
        0,
        143,
        145,
        3,
        20,
        10,
        0,
        144,
        146,
        3,
        24,
        12,
        0,
        145,
        144,
        1,
        0,
        0,
        0,
        145,
        146,
        1,
        0,
        0,
        0,
        146,
        155,
        1,
        0,
        0,
        0,
        147,
        149,
        3,
        18,
        9,
        0,
        148,
        147,
        1,
        0,
        0,
        0,
        148,
        149,
        1,
        0,
        0,
        0,
        149,
        150,
        1,
        0,
        0,
        0,
        150,
        152,
        3,
        12,
        6,
        0,
        151,
        153,
        3,
        24,
        12,
        0,
        152,
        151,
        1,
        0,
        0,
        0,
        152,
        153,
        1,
        0,
        0,
        0,
        153,
        155,
        1,
        0,
        0,
        0,
        154,
        135,
        1,
        0,
        0,
        0,
        154,
        136,
        1,
        0,
        0,
        0,
        154,
        141,
        1,
        0,
        0,
        0,
        154,
        148,
        1,
        0,
        0,
        0,
        155,
        9,
        1,
        0,
        0,
        0,
        156,
        157,
        3,
        22,
        11,
        0,
        157,
        160,
        5,
        40,
        0,
        0,
        158,
        161,
        3,
        14,
        7,
        0,
        159,
        161,
        3,
        12,
        6,
        0,
        160,
        158,
        1,
        0,
        0,
        0,
        160,
        159,
        1,
        0,
        0,
        0,
        161,
        162,
        1,
        0,
        0,
        0,
        162,
        163,
        5,
        41,
        0,
        0,
        163,
        11,
        1,
        0,
        0,
        0,
        164,
        165,
        5,
        17,
        0,
        0,
        165,
        166,
        5,
        40,
        0,
        0,
        166,
        167,
        3,
        26,
        13,
        0,
        167,
        168,
        5,
        41,
        0,
        0,
        168,
        13,
        1,
        0,
        0,
        0,
        169,
        174,
        3,
        16,
        8,
        0,
        170,
        171,
        5,
        27,
        0,
        0,
        171,
        173,
        3,
        16,
        8,
        0,
        172,
        170,
        1,
        0,
        0,
        0,
        173,
        176,
        1,
        0,
        0,
        0,
        174,
        172,
        1,
        0,
        0,
        0,
        174,
        175,
        1,
        0,
        0,
        0,
        175,
        15,
        1,
        0,
        0,
        0,
        176,
        174,
        1,
        0,
        0,
        0,
        177,
        183,
        5,
        39,
        0,
        0,
        178,
        179,
        5,
        47,
        0,
        0,
        179,
        180,
        5,
        39,
        0,
        0,
        180,
        183,
        5,
        47,
        0,
        0,
        181,
        183,
        3,
        60,
        30,
        0,
        182,
        177,
        1,
        0,
        0,
        0,
        182,
        178,
        1,
        0,
        0,
        0,
        182,
        181,
        1,
        0,
        0,
        0,
        183,
        17,
        1,
        0,
        0,
        0,
        184,
        185,
        5,
        11,
        0,
        0,
        185,
        19,
        1,
        0,
        0,
        0,
        186,
        191,
        5,
        39,
        0,
        0,
        187,
        188,
        5,
        28,
        0,
        0,
        188,
        190,
        5,
        39,
        0,
        0,
        189,
        187,
        1,
        0,
        0,
        0,
        190,
        193,
        1,
        0,
        0,
        0,
        191,
        189,
        1,
        0,
        0,
        0,
        191,
        192,
        1,
        0,
        0,
        0,
        192,
        21,
        1,
        0,
        0,
        0,
        193,
        191,
        1,
        0,
        0,
        0,
        194,
        195,
        5,
        39,
        0,
        0,
        195,
        23,
        1,
        0,
        0,
        0,
        196,
        197,
        5,
        2,
        0,
        0,
        197,
        198,
        5,
        39,
        0,
        0,
        198,
        25,
        1,
        0,
        0,
        0,
        199,
        200,
        5,
        49,
        0,
        0,
        200,
        27,
        1,
        0,
        0,
        0,
        201,
        208,
        5,
        39,
        0,
        0,
        202,
        203,
        5,
        40,
        0,
        0,
        203,
        204,
        3,
        4,
        2,
        0,
        204,
        205,
        5,
        41,
        0,
        0,
        205,
        208,
        1,
        0,
        0,
        0,
        206,
        208,
        3,
        30,
        15,
        0,
        207,
        201,
        1,
        0,
        0,
        0,
        207,
        202,
        1,
        0,
        0,
        0,
        207,
        206,
        1,
        0,
        0,
        0,
        208,
        29,
        1,
        0,
        0,
        0,
        209,
        210,
        5,
        39,
        0,
        0,
        210,
        211,
        3,
        32,
        16,
        0,
        211,
        212,
        5,
        16,
        0,
        0,
        212,
        220,
        5,
        39,
        0,
        0,
        213,
        217,
        5,
        18,
        0,
        0,
        214,
        216,
        3,
        34,
        17,
        0,
        215,
        214,
        1,
        0,
        0,
        0,
        216,
        219,
        1,
        0,
        0,
        0,
        217,
        215,
        1,
        0,
        0,
        0,
        217,
        218,
        1,
        0,
        0,
        0,
        218,
        221,
        1,
        0,
        0,
        0,
        219,
        217,
        1,
        0,
        0,
        0,
        220,
        213,
        1,
        0,
        0,
        0,
        220,
        221,
        1,
        0,
        0,
        0,
        221,
        31,
        1,
        0,
        0,
        0,
        222,
        223,
        7,
        0,
        0,
        0,
        223,
        33,
        1,
        0,
        0,
        0,
        224,
        225,
        5,
        39,
        0,
        0,
        225,
        226,
        5,
        28,
        0,
        0,
        226,
        227,
        3,
        20,
        10,
        0,
        227,
        228,
        5,
        42,
        0,
        0,
        228,
        229,
        5,
        39,
        0,
        0,
        229,
        230,
        5,
        28,
        0,
        0,
        230,
        231,
        3,
        20,
        10,
        0,
        231,
        35,
        1,
        0,
        0,
        0,
        232,
        233,
        5,
        4,
        0,
        0,
        233,
        234,
        3,
        38,
        19,
        0,
        234,
        37,
        1,
        0,
        0,
        0,
        235,
        240,
        3,
        40,
        20,
        0,
        236,
        237,
        5,
        5,
        0,
        0,
        237,
        239,
        3,
        40,
        20,
        0,
        238,
        236,
        1,
        0,
        0,
        0,
        239,
        242,
        1,
        0,
        0,
        0,
        240,
        238,
        1,
        0,
        0,
        0,
        240,
        241,
        1,
        0,
        0,
        0,
        241,
        39,
        1,
        0,
        0,
        0,
        242,
        240,
        1,
        0,
        0,
        0,
        243,
        248,
        3,
        42,
        21,
        0,
        244,
        245,
        5,
        6,
        0,
        0,
        245,
        247,
        3,
        42,
        21,
        0,
        246,
        244,
        1,
        0,
        0,
        0,
        247,
        250,
        1,
        0,
        0,
        0,
        248,
        246,
        1,
        0,
        0,
        0,
        248,
        249,
        1,
        0,
        0,
        0,
        249,
        41,
        1,
        0,
        0,
        0,
        250,
        248,
        1,
        0,
        0,
        0,
        251,
        252,
        5,
        7,
        0,
        0,
        252,
        255,
        3,
        44,
        22,
        0,
        253,
        255,
        3,
        44,
        22,
        0,
        254,
        251,
        1,
        0,
        0,
        0,
        254,
        253,
        1,
        0,
        0,
        0,
        255,
        43,
        1,
        0,
        0,
        0,
        256,
        262,
        3,
        46,
        23,
        0,
        257,
        258,
        5,
        40,
        0,
        0,
        258,
        259,
        3,
        38,
        19,
        0,
        259,
        260,
        5,
        41,
        0,
        0,
        260,
        262,
        1,
        0,
        0,
        0,
        261,
        256,
        1,
        0,
        0,
        0,
        261,
        257,
        1,
        0,
        0,
        0,
        262,
        45,
        1,
        0,
        0,
        0,
        263,
        269,
        3,
        48,
        24,
        0,
        264,
        269,
        3,
        50,
        25,
        0,
        265,
        269,
        3,
        52,
        26,
        0,
        266,
        269,
        3,
        54,
        27,
        0,
        267,
        269,
        3,
        10,
        5,
        0,
        268,
        263,
        1,
        0,
        0,
        0,
        268,
        264,
        1,
        0,
        0,
        0,
        268,
        265,
        1,
        0,
        0,
        0,
        268,
        266,
        1,
        0,
        0,
        0,
        268,
        267,
        1,
        0,
        0,
        0,
        269,
        47,
        1,
        0,
        0,
        0,
        270,
        271,
        5,
        25,
        0,
        0,
        271,
        272,
        5,
        40,
        0,
        0,
        272,
        277,
        5,
        49,
        0,
        0,
        273,
        274,
        5,
        27,
        0,
        0,
        274,
        276,
        5,
        49,
        0,
        0,
        275,
        273,
        1,
        0,
        0,
        0,
        276,
        279,
        1,
        0,
        0,
        0,
        277,
        275,
        1,
        0,
        0,
        0,
        277,
        278,
        1,
        0,
        0,
        0,
        278,
        280,
        1,
        0,
        0,
        0,
        279,
        277,
        1,
        0,
        0,
        0,
        280,
        281,
        5,
        41,
        0,
        0,
        281,
        49,
        1,
        0,
        0,
        0,
        282,
        283,
        3,
        58,
        29,
        0,
        283,
        284,
        5,
        43,
        0,
        0,
        284,
        285,
        3,
        60,
        30,
        0,
        285,
        293,
        1,
        0,
        0,
        0,
        286,
        287,
        3,
        58,
        29,
        0,
        287,
        290,
        5,
        42,
        0,
        0,
        288,
        291,
        3,
        60,
        30,
        0,
        289,
        291,
        5,
        49,
        0,
        0,
        290,
        288,
        1,
        0,
        0,
        0,
        290,
        289,
        1,
        0,
        0,
        0,
        291,
        293,
        1,
        0,
        0,
        0,
        292,
        282,
        1,
        0,
        0,
        0,
        292,
        286,
        1,
        0,
        0,
        0,
        293,
        51,
        1,
        0,
        0,
        0,
        294,
        296,
        3,
        58,
        29,
        0,
        295,
        297,
        5,
        7,
        0,
        0,
        296,
        295,
        1,
        0,
        0,
        0,
        296,
        297,
        1,
        0,
        0,
        0,
        297,
        298,
        1,
        0,
        0,
        0,
        298,
        299,
        5,
        8,
        0,
        0,
        299,
        300,
        3,
        58,
        29,
        0,
        300,
        301,
        5,
        6,
        0,
        0,
        301,
        302,
        3,
        58,
        29,
        0,
        302,
        53,
        1,
        0,
        0,
        0,
        303,
        304,
        3,
        58,
        29,
        0,
        304,
        305,
        5,
        9,
        0,
        0,
        305,
        306,
        5,
        40,
        0,
        0,
        306,
        307,
        3,
        56,
        28,
        0,
        307,
        308,
        5,
        41,
        0,
        0,
        308,
        55,
        1,
        0,
        0,
        0,
        309,
        314,
        3,
        58,
        29,
        0,
        310,
        311,
        5,
        27,
        0,
        0,
        311,
        313,
        3,
        58,
        29,
        0,
        312,
        310,
        1,
        0,
        0,
        0,
        313,
        316,
        1,
        0,
        0,
        0,
        314,
        312,
        1,
        0,
        0,
        0,
        314,
        315,
        1,
        0,
        0,
        0,
        315,
        57,
        1,
        0,
        0,
        0,
        316,
        314,
        1,
        0,
        0,
        0,
        317,
        320,
        3,
        20,
        10,
        0,
        318,
        320,
        3,
        60,
        30,
        0,
        319,
        317,
        1,
        0,
        0,
        0,
        319,
        318,
        1,
        0,
        0,
        0,
        320,
        59,
        1,
        0,
        0,
        0,
        321,
        324,
        3,
        66,
        33,
        0,
        322,
        324,
        3,
        62,
        31,
        0,
        323,
        321,
        1,
        0,
        0,
        0,
        323,
        322,
        1,
        0,
        0,
        0,
        324,
        61,
        1,
        0,
        0,
        0,
        325,
        326,
        3,
        64,
        32,
        0,
        326,
        63,
        1,
        0,
        0,
        0,
        327,
        328,
        5,
        45,
        0,
        0,
        328,
        65,
        1,
        0,
        0,
        0,
        329,
        330,
        3,
        68,
        34,
        0,
        330,
        331,
        3,
        70,
        35,
        0,
        331,
        334,
        1,
        0,
        0,
        0,
        332,
        334,
        3,
        70,
        35,
        0,
        333,
        329,
        1,
        0,
        0,
        0,
        333,
        332,
        1,
        0,
        0,
        0,
        334,
        67,
        1,
        0,
        0,
        0,
        335,
        336,
        7,
        1,
        0,
        0,
        336,
        69,
        1,
        0,
        0,
        0,
        337,
        338,
        3,
        72,
        36,
        0,
        338,
        71,
        1,
        0,
        0,
        0,
        339,
        340,
        5,
        44,
        0,
        0,
        340,
        341,
        5,
        28,
        0,
        0,
        341,
        346,
        5,
        44,
        0,
        0,
        342,
        343,
        5,
        28,
        0,
        0,
        343,
        346,
        5,
        44,
        0,
        0,
        344,
        346,
        5,
        44,
        0,
        0,
        345,
        339,
        1,
        0,
        0,
        0,
        345,
        342,
        1,
        0,
        0,
        0,
        345,
        344,
        1,
        0,
        0,
        0,
        346,
        73,
        1,
        0,
        0,
        0,
        347,
        348,
        5,
        24,
        0,
        0,
        348,
        349,
        5,
        13,
        0,
        0,
        349,
        350,
        3,
        76,
        38,
        0,
        350,
        75,
        1,
        0,
        0,
        0,
        351,
        356,
        5,
        39,
        0,
        0,
        352,
        353,
        5,
        27,
        0,
        0,
        353,
        355,
        5,
        39,
        0,
        0,
        354,
        352,
        1,
        0,
        0,
        0,
        355,
        358,
        1,
        0,
        0,
        0,
        356,
        354,
        1,
        0,
        0,
        0,
        356,
        357,
        1,
        0,
        0,
        0,
        357,
        77,
        1,
        0,
        0,
        0,
        358,
        356,
        1,
        0,
        0,
        0,
        359,
        360,
        5,
        19,
        0,
        0,
        360,
        361,
        5,
        13,
        0,
        0,
        361,
        366,
        3,
        80,
        40,
        0,
        362,
        363,
        5,
        27,
        0,
        0,
        363,
        365,
        3,
        80,
        40,
        0,
        364,
        362,
        1,
        0,
        0,
        0,
        365,
        368,
        1,
        0,
        0,
        0,
        366,
        364,
        1,
        0,
        0,
        0,
        366,
        367,
        1,
        0,
        0,
        0,
        367,
        79,
        1,
        0,
        0,
        0,
        368,
        366,
        1,
        0,
        0,
        0,
        369,
        371,
        5,
        39,
        0,
        0,
        370,
        372,
        3,
        82,
        41,
        0,
        371,
        370,
        1,
        0,
        0,
        0,
        371,
        372,
        1,
        0,
        0,
        0,
        372,
        81,
        1,
        0,
        0,
        0,
        373,
        374,
        7,
        2,
        0,
        0,
        374,
        83,
        1,
        0,
        0,
        0,
        375,
        376,
        5,
        22,
        0,
        0,
        376,
        377,
        5,
        13,
        0,
        0,
        377,
        378,
        5,
        44,
        0,
        0,
        378,
        379,
        3,
        86,
        43,
        0,
        379,
        85,
        1,
        0,
        0,
        0,
        380,
        381,
        7,
        3,
        0,
        0,
        381,
        87,
        1,
        0,
        0,
        0,
        382,
        383,
        5,
        23,
        0,
        0,
        383,
        384,
        5,
        44,
        0,
        0,
        384,
        89,
        1,
        0,
        0,
        0,
        37,
        96,
        102,
        109,
        119,
        122,
        125,
        132,
        138,
        141,
        145,
        148,
        152,
        154,
        160,
        174,
        182,
        191,
        207,
        217,
        220,
        240,
        248,
        254,
        261,
        268,
        277,
        290,
        292,
        296,
        314,
        319,
        323,
        333,
        345,
        356,
        366,
        371,
    ]


class SqlParser(Parser):

    grammarFileName = "Sql.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = [
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "'*'",
        "','",
        "'.'",
        "'+'",
        "'-'",
        "'/'",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "'('",
        "')'",
        "'='",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "'''",
        "'\"'",
        "'\\\"'",
    ]

    symbolicNames = [
        "<INVALID>",
        "KW_SELECT",
        "KW_AS",
        "KW_FROM",
        "KW_WHERE",
        "KW_OR",
        "KW_AND",
        "KW_NOT",
        "KW_BETWEEN",
        "KW_IN",
        "KW_ALL",
        "KW_DISTINCT",
        "KW_UNION",
        "KW_BY",
        "KW_LEFT",
        "KW_INNER",
        "KW_JOIN",
        "KW_EVAL",
        "KW_ON",
        "KW_ORDER",
        "KW_DESC",
        "KW_ASC",
        "KW_TIMING",
        "KW_LIMIT",
        "KW_GROUP",
        "KW_CONTAINS",
        "ASTERISK",
        "COMMA",
        "PERIOD",
        "PLUS_SIGN",
        "MINUS_SIGN",
        "DIV_SIGN",
        "SEC_TIME_UNIT",
        "MIN_TIME_UNIT",
        "SUBSECONDS_TIME_UNIT",
        "HOUR_TIME_UNIT",
        "DAY_TIME_UNIT",
        "MONTH_TIME_UNIT",
        "WEEK_TIME_UNIT",
        "IDENTIFIER",
        "OPEN_PARENTHESIS",
        "CLOSE_PARENTHESIS",
        "EQUALS",
        "COMP_OPERATOR",
        "UNSIGNED_INTEGER",
        "QUOTED_STRING",
        "QUOTE",
        "DOUBLE_QUOTE",
        "ESCAPED_DOUBLE_QUOTE",
        "ANY_STRING",
        "WHITESPACE",
    ]

    RULE_queryStatement = 0
    RULE_unionOption = 1
    RULE_querySpecification = 2
    RULE_selectList = 3
    RULE_selectItem = 4
    RULE_functionExpression = 5
    RULE_evalClause = 6
    RULE_parameterList = 7
    RULE_parameter = 8
    RULE_selectOption = 9
    RULE_simpleCol = 10
    RULE_functionID = 11
    RULE_asClause = 12
    RULE_evalExpression = 13
    RULE_tableReference = 14
    RULE_joinClause = 15
    RULE_joinOption = 16
    RULE_colComparison = 17
    RULE_whereClause = 18
    RULE_searchCondition = 19
    RULE_booleanTerm = 20
    RULE_booleanFactor = 21
    RULE_booleanTest = 22
    RULE_predicate = 23
    RULE_containsExpression = 24
    RULE_comparisonPredicate = 25
    RULE_betweenPredicate = 26
    RULE_inPredicate = 27
    RULE_inValueList = 28
    RULE_valueExpression = 29
    RULE_literal = 30
    RULE_generalLiteral = 31
    RULE_characterStringLiteral = 32
    RULE_signedNumericLiteral = 33
    RULE_sign = 34
    RULE_unsignedNumericLiteral = 35
    RULE_exactNumericLiteral = 36
    RULE_groupByClause = 37
    RULE_columnList = 38
    RULE_orderByClause = 39
    RULE_orderItem = 40
    RULE_orderOption = 41
    RULE_timingByClause = 42
    RULE_timeSpanUnit = 43
    RULE_limitClause = 44

    ruleNames = [
        "queryStatement",
        "unionOption",
        "querySpecification",
        "selectList",
        "selectItem",
        "functionExpression",
        "evalClause",
        "parameterList",
        "parameter",
        "selectOption",
        "simpleCol",
        "functionID",
        "asClause",
        "evalExpression",
        "tableReference",
        "joinClause",
        "joinOption",
        "colComparison",
        "whereClause",
        "searchCondition",
        "booleanTerm",
        "booleanFactor",
        "booleanTest",
        "predicate",
        "containsExpression",
        "comparisonPredicate",
        "betweenPredicate",
        "inPredicate",
        "inValueList",
        "valueExpression",
        "literal",
        "generalLiteral",
        "characterStringLiteral",
        "signedNumericLiteral",
        "sign",
        "unsignedNumericLiteral",
        "exactNumericLiteral",
        "groupByClause",
        "columnList",
        "orderByClause",
        "orderItem",
        "orderOption",
        "timingByClause",
        "timeSpanUnit",
        "limitClause",
    ]

    EOF = Token.EOF
    KW_SELECT = 1
    KW_AS = 2
    KW_FROM = 3
    KW_WHERE = 4
    KW_OR = 5
    KW_AND = 6
    KW_NOT = 7
    KW_BETWEEN = 8
    KW_IN = 9
    KW_ALL = 10
    KW_DISTINCT = 11
    KW_UNION = 12
    KW_BY = 13
    KW_LEFT = 14
    KW_INNER = 15
    KW_JOIN = 16
    KW_EVAL = 17
    KW_ON = 18
    KW_ORDER = 19
    KW_DESC = 20
    KW_ASC = 21
    KW_TIMING = 22
    KW_LIMIT = 23
    KW_GROUP = 24
    KW_CONTAINS = 25
    ASTERISK = 26
    COMMA = 27
    PERIOD = 28
    PLUS_SIGN = 29
    MINUS_SIGN = 30
    DIV_SIGN = 31
    SEC_TIME_UNIT = 32
    MIN_TIME_UNIT = 33
    SUBSECONDS_TIME_UNIT = 34
    HOUR_TIME_UNIT = 35
    DAY_TIME_UNIT = 36
    MONTH_TIME_UNIT = 37
    WEEK_TIME_UNIT = 38
    IDENTIFIER = 39
    OPEN_PARENTHESIS = 40
    CLOSE_PARENTHESIS = 41
    EQUALS = 42
    COMP_OPERATOR = 43
    UNSIGNED_INTEGER = 44
    QUOTED_STRING = 45
    QUOTE = 46
    DOUBLE_QUOTE = 47
    ESCAPED_DOUBLE_QUOTE = 48
    ANY_STRING = 49
    WHITESPACE = 50

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None

    class QueryStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def querySpecification(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.QuerySpecificationContext)
            else:
                return self.getTypedRuleContext(SqlParser.QuerySpecificationContext, i)

        def unionOption(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.UnionOptionContext)
            else:
                return self.getTypedRuleContext(SqlParser.UnionOptionContext, i)

        def getRuleIndex(self):
            return SqlParser.RULE_queryStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQueryStatement"):
                listener.enterQueryStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQueryStatement"):
                listener.exitQueryStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitQueryStatement"):
                return visitor.visitQueryStatement(self)
            else:
                return visitor.visitChildren(self)

    def queryStatement(self):

        localctx = SqlParser.QueryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_queryStatement)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 90
            self.querySpecification()
            self.state = 96
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 12:
                self.state = 91
                self.unionOption()
                self.state = 92
                self.querySpecification()
                self.state = 98
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnionOptionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_UNION(self):
            return self.getToken(SqlParser.KW_UNION, 0)

        def KW_ALL(self):
            return self.getToken(SqlParser.KW_ALL, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_unionOption

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnionOption"):
                listener.enterUnionOption(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnionOption"):
                listener.exitUnionOption(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUnionOption"):
                return visitor.visitUnionOption(self)
            else:
                return visitor.visitChildren(self)

    def unionOption(self):

        localctx = SqlParser.UnionOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_unionOption)
        try:
            self.state = 102
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 1, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 99
                self.match(SqlParser.KW_UNION)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 100
                self.match(SqlParser.KW_UNION)
                self.state = 101
                self.match(SqlParser.KW_ALL)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuerySpecificationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SELECT(self):
            return self.getToken(SqlParser.KW_SELECT, 0)

        def selectList(self):
            return self.getTypedRuleContext(SqlParser.SelectListContext, 0)

        def KW_FROM(self):
            return self.getToken(SqlParser.KW_FROM, 0)

        def tableReference(self):
            return self.getTypedRuleContext(SqlParser.TableReferenceContext, 0)

        def whereClause(self):
            return self.getTypedRuleContext(SqlParser.WhereClauseContext, 0)

        def groupByClause(self):
            return self.getTypedRuleContext(SqlParser.GroupByClauseContext, 0)

        def timingByClause(self):
            return self.getTypedRuleContext(SqlParser.TimingByClauseContext, 0)

        def orderByClause(self):
            return self.getTypedRuleContext(SqlParser.OrderByClauseContext, 0)

        def limitClause(self):
            return self.getTypedRuleContext(SqlParser.LimitClauseContext, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_querySpecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQuerySpecification"):
                listener.enterQuerySpecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQuerySpecification"):
                listener.exitQuerySpecification(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitQuerySpecification"):
                return visitor.visitQuerySpecification(self)
            else:
                return visitor.visitChildren(self)

    def querySpecification(self):

        localctx = SqlParser.QuerySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_querySpecification)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 104
            self.match(SqlParser.KW_SELECT)
            self.state = 105
            self.selectList()
            self.state = 106
            self.match(SqlParser.KW_FROM)
            self.state = 107
            self.tableReference()
            self.state = 109
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 4:
                self.state = 108
                self.whereClause()

            self.state = 119
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 3, self._ctx)
            if la_ == 1:
                self.state = 111
                self.groupByClause()

            elif la_ == 2:
                self.state = 112
                self.groupByClause()
                self.state = 113
                self.timingByClause()

            elif la_ == 3:
                self.state = 115
                self.timingByClause()

            elif la_ == 4:
                self.state = 116
                self.timingByClause()
                self.state = 117
                self.groupByClause()

            self.state = 122
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 19:
                self.state = 121
                self.orderByClause()

            self.state = 125
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 23:
                self.state = 124
                self.limitClause()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectItem(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.SelectItemContext)
            else:
                return self.getTypedRuleContext(SqlParser.SelectItemContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(SqlParser.COMMA)
            else:
                return self.getToken(SqlParser.COMMA, i)

        def getRuleIndex(self):
            return SqlParser.RULE_selectList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSelectList"):
                listener.enterSelectList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSelectList"):
                listener.exitSelectList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSelectList"):
                return visitor.visitSelectList(self)
            else:
                return visitor.visitChildren(self)

    def selectList(self):

        localctx = SqlParser.SelectListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_selectList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 127
            self.selectItem()
            self.state = 132
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 27:
                self.state = 128
                self.match(SqlParser.COMMA)
                self.state = 129
                self.selectItem()
                self.state = 134
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectItemContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASTERISK(self):
            return self.getToken(SqlParser.ASTERISK, 0)

        def functionExpression(self):
            return self.getTypedRuleContext(SqlParser.FunctionExpressionContext, 0)

        def asClause(self):
            return self.getTypedRuleContext(SqlParser.AsClauseContext, 0)

        def simpleCol(self):
            return self.getTypedRuleContext(SqlParser.SimpleColContext, 0)

        def selectOption(self):
            return self.getTypedRuleContext(SqlParser.SelectOptionContext, 0)

        def evalClause(self):
            return self.getTypedRuleContext(SqlParser.EvalClauseContext, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_selectItem

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSelectItem"):
                listener.enterSelectItem(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSelectItem"):
                listener.exitSelectItem(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSelectItem"):
                return visitor.visitSelectItem(self)
            else:
                return visitor.visitChildren(self)

    def selectItem(self):

        localctx = SqlParser.SelectItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_selectItem)
        self._la = 0  # Token type
        try:
            self.state = 154
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 12, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 135
                self.match(SqlParser.ASTERISK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 136
                self.functionExpression()
                self.state = 138
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 2:
                    self.state = 137
                    self.asClause()

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 141
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 11:
                    self.state = 140
                    self.selectOption()

                self.state = 143
                self.simpleCol()
                self.state = 145
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 2:
                    self.state = 144
                    self.asClause()

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 148
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 11:
                    self.state = 147
                    self.selectOption()

                self.state = 150
                self.evalClause()
                self.state = 152
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 2:
                    self.state = 151
                    self.asClause()

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionID(self):
            return self.getTypedRuleContext(SqlParser.FunctionIDContext, 0)

        def OPEN_PARENTHESIS(self):
            return self.getToken(SqlParser.OPEN_PARENTHESIS, 0)

        def CLOSE_PARENTHESIS(self):
            return self.getToken(SqlParser.CLOSE_PARENTHESIS, 0)

        def parameterList(self):
            return self.getTypedRuleContext(SqlParser.ParameterListContext, 0)

        def evalClause(self):
            return self.getTypedRuleContext(SqlParser.EvalClauseContext, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_functionExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunctionExpression"):
                listener.enterFunctionExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunctionExpression"):
                listener.exitFunctionExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFunctionExpression"):
                return visitor.visitFunctionExpression(self)
            else:
                return visitor.visitChildren(self)

    def functionExpression(self):

        localctx = SqlParser.FunctionExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_functionExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 156
            self.functionID()
            self.state = 157
            self.match(SqlParser.OPEN_PARENTHESIS)
            self.state = 160
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [28, 29, 30, 39, 44, 45, 47]:
                self.state = 158
                self.parameterList()
                pass
            elif token in [17]:
                self.state = 159
                self.evalClause()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 162
            self.match(SqlParser.CLOSE_PARENTHESIS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EvalClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_EVAL(self):
            return self.getToken(SqlParser.KW_EVAL, 0)

        def OPEN_PARENTHESIS(self):
            return self.getToken(SqlParser.OPEN_PARENTHESIS, 0)

        def evalExpression(self):
            return self.getTypedRuleContext(SqlParser.EvalExpressionContext, 0)

        def CLOSE_PARENTHESIS(self):
            return self.getToken(SqlParser.CLOSE_PARENTHESIS, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_evalClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEvalClause"):
                listener.enterEvalClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEvalClause"):
                listener.exitEvalClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEvalClause"):
                return visitor.visitEvalClause(self)
            else:
                return visitor.visitChildren(self)

    def evalClause(self):

        localctx = SqlParser.EvalClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_evalClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 164
            self.match(SqlParser.KW_EVAL)
            self.state = 165
            self.match(SqlParser.OPEN_PARENTHESIS)
            self.state = 166
            self.evalExpression()
            self.state = 167
            self.match(SqlParser.CLOSE_PARENTHESIS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.ParameterContext)
            else:
                return self.getTypedRuleContext(SqlParser.ParameterContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(SqlParser.COMMA)
            else:
                return self.getToken(SqlParser.COMMA, i)

        def getRuleIndex(self):
            return SqlParser.RULE_parameterList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParameterList"):
                listener.enterParameterList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParameterList"):
                listener.exitParameterList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitParameterList"):
                return visitor.visitParameterList(self)
            else:
                return visitor.visitChildren(self)

    def parameterList(self):

        localctx = SqlParser.ParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_parameterList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 169
            self.parameter()
            self.state = 174
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 27:
                self.state = 170
                self.match(SqlParser.COMMA)
                self.state = 171
                self.parameter()
                self.state = 176
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SqlParser.IDENTIFIER, 0)

        def DOUBLE_QUOTE(self, i: int = None):
            if i is None:
                return self.getTokens(SqlParser.DOUBLE_QUOTE)
            else:
                return self.getToken(SqlParser.DOUBLE_QUOTE, i)

        def literal(self):
            return self.getTypedRuleContext(SqlParser.LiteralContext, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_parameter

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParameter"):
                listener.enterParameter(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParameter"):
                listener.exitParameter(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitParameter"):
                return visitor.visitParameter(self)
            else:
                return visitor.visitChildren(self)

    def parameter(self):

        localctx = SqlParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_parameter)
        try:
            self.state = 182
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [39]:
                self.enterOuterAlt(localctx, 1)
                self.state = 177
                self.match(SqlParser.IDENTIFIER)
                pass
            elif token in [47]:
                self.enterOuterAlt(localctx, 2)
                self.state = 178
                self.match(SqlParser.DOUBLE_QUOTE)
                self.state = 179
                self.match(SqlParser.IDENTIFIER)
                self.state = 180
                self.match(SqlParser.DOUBLE_QUOTE)
                pass
            elif token in [28, 29, 30, 44, 45]:
                self.enterOuterAlt(localctx, 3)
                self.state = 181
                self.literal()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectOptionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DISTINCT(self):
            return self.getToken(SqlParser.KW_DISTINCT, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_selectOption

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSelectOption"):
                listener.enterSelectOption(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSelectOption"):
                listener.exitSelectOption(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSelectOption"):
                return visitor.visitSelectOption(self)
            else:
                return visitor.visitChildren(self)

    def selectOption(self):

        localctx = SqlParser.SelectOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_selectOption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 184
            self.match(SqlParser.KW_DISTINCT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleColContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i: int = None):
            if i is None:
                return self.getTokens(SqlParser.IDENTIFIER)
            else:
                return self.getToken(SqlParser.IDENTIFIER, i)

        def PERIOD(self, i: int = None):
            if i is None:
                return self.getTokens(SqlParser.PERIOD)
            else:
                return self.getToken(SqlParser.PERIOD, i)

        def getRuleIndex(self):
            return SqlParser.RULE_simpleCol

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimpleCol"):
                listener.enterSimpleCol(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimpleCol"):
                listener.exitSimpleCol(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimpleCol"):
                return visitor.visitSimpleCol(self)
            else:
                return visitor.visitChildren(self)

    def simpleCol(self):

        localctx = SqlParser.SimpleColContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_simpleCol)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 186
            self.match(SqlParser.IDENTIFIER)
            self.state = 191
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 28:
                self.state = 187
                self.match(SqlParser.PERIOD)
                self.state = 188
                self.match(SqlParser.IDENTIFIER)
                self.state = 193
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionIDContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SqlParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_functionID

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunctionID"):
                listener.enterFunctionID(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunctionID"):
                listener.exitFunctionID(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFunctionID"):
                return visitor.visitFunctionID(self)
            else:
                return visitor.visitChildren(self)

    def functionID(self):

        localctx = SqlParser.FunctionIDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_functionID)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 194
            self.match(SqlParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AsClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_AS(self):
            return self.getToken(SqlParser.KW_AS, 0)

        def IDENTIFIER(self):
            return self.getToken(SqlParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_asClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAsClause"):
                listener.enterAsClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAsClause"):
                listener.exitAsClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAsClause"):
                return visitor.visitAsClause(self)
            else:
                return visitor.visitChildren(self)

    def asClause(self):

        localctx = SqlParser.AsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_asClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 196
            self.match(SqlParser.KW_AS)
            self.state = 197
            self.match(SqlParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EvalExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANY_STRING(self):
            return self.getToken(SqlParser.ANY_STRING, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_evalExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEvalExpression"):
                listener.enterEvalExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEvalExpression"):
                listener.exitEvalExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEvalExpression"):
                return visitor.visitEvalExpression(self)
            else:
                return visitor.visitChildren(self)

    def evalExpression(self):

        localctx = SqlParser.EvalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_evalExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 199
            self.match(SqlParser.ANY_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TableReferenceContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SqlParser.IDENTIFIER, 0)

        def OPEN_PARENTHESIS(self):
            return self.getToken(SqlParser.OPEN_PARENTHESIS, 0)

        def querySpecification(self):
            return self.getTypedRuleContext(SqlParser.QuerySpecificationContext, 0)

        def CLOSE_PARENTHESIS(self):
            return self.getToken(SqlParser.CLOSE_PARENTHESIS, 0)

        def joinClause(self):
            return self.getTypedRuleContext(SqlParser.JoinClauseContext, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_tableReference

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTableReference"):
                listener.enterTableReference(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTableReference"):
                listener.exitTableReference(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTableReference"):
                return visitor.visitTableReference(self)
            else:
                return visitor.visitChildren(self)

    def tableReference(self):

        localctx = SqlParser.TableReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_tableReference)
        try:
            self.state = 207
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 17, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 201
                self.match(SqlParser.IDENTIFIER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 202
                self.match(SqlParser.OPEN_PARENTHESIS)
                self.state = 203
                self.querySpecification()
                self.state = 204
                self.match(SqlParser.CLOSE_PARENTHESIS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 206
                self.joinClause()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class JoinClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i: int = None):
            if i is None:
                return self.getTokens(SqlParser.IDENTIFIER)
            else:
                return self.getToken(SqlParser.IDENTIFIER, i)

        def joinOption(self):
            return self.getTypedRuleContext(SqlParser.JoinOptionContext, 0)

        def KW_JOIN(self):
            return self.getToken(SqlParser.KW_JOIN, 0)

        def KW_ON(self):
            return self.getToken(SqlParser.KW_ON, 0)

        def colComparison(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.ColComparisonContext)
            else:
                return self.getTypedRuleContext(SqlParser.ColComparisonContext, i)

        def getRuleIndex(self):
            return SqlParser.RULE_joinClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterJoinClause"):
                listener.enterJoinClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitJoinClause"):
                listener.exitJoinClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitJoinClause"):
                return visitor.visitJoinClause(self)
            else:
                return visitor.visitChildren(self)

    def joinClause(self):

        localctx = SqlParser.JoinClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_joinClause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 209
            self.match(SqlParser.IDENTIFIER)
            self.state = 210
            self.joinOption()
            self.state = 211
            self.match(SqlParser.KW_JOIN)
            self.state = 212
            self.match(SqlParser.IDENTIFIER)
            self.state = 220
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 18:
                self.state = 213
                self.match(SqlParser.KW_ON)
                self.state = 217
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 39:
                    self.state = 214
                    self.colComparison()
                    self.state = 219
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class JoinOptionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_LEFT(self):
            return self.getToken(SqlParser.KW_LEFT, 0)

        def KW_INNER(self):
            return self.getToken(SqlParser.KW_INNER, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_joinOption

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterJoinOption"):
                listener.enterJoinOption(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitJoinOption"):
                listener.exitJoinOption(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitJoinOption"):
                return visitor.visitJoinOption(self)
            else:
                return visitor.visitChildren(self)

    def joinOption(self):

        localctx = SqlParser.JoinOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_joinOption)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 222
            _la = self._input.LA(1)
            if not (_la == 14 or _la == 15):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColComparisonContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i: int = None):
            if i is None:
                return self.getTokens(SqlParser.IDENTIFIER)
            else:
                return self.getToken(SqlParser.IDENTIFIER, i)

        def PERIOD(self, i: int = None):
            if i is None:
                return self.getTokens(SqlParser.PERIOD)
            else:
                return self.getToken(SqlParser.PERIOD, i)

        def simpleCol(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.SimpleColContext)
            else:
                return self.getTypedRuleContext(SqlParser.SimpleColContext, i)

        def EQUALS(self):
            return self.getToken(SqlParser.EQUALS, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_colComparison

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColComparison"):
                listener.enterColComparison(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColComparison"):
                listener.exitColComparison(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitColComparison"):
                return visitor.visitColComparison(self)
            else:
                return visitor.visitChildren(self)

    def colComparison(self):

        localctx = SqlParser.ColComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_colComparison)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 224
            self.match(SqlParser.IDENTIFIER)
            self.state = 225
            self.match(SqlParser.PERIOD)
            self.state = 226
            self.simpleCol()
            self.state = 227
            self.match(SqlParser.EQUALS)
            self.state = 228
            self.match(SqlParser.IDENTIFIER)
            self.state = 229
            self.match(SqlParser.PERIOD)
            self.state = 230
            self.simpleCol()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhereClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WHERE(self):
            return self.getToken(SqlParser.KW_WHERE, 0)

        def searchCondition(self):
            return self.getTypedRuleContext(SqlParser.SearchConditionContext, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_whereClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWhereClause"):
                listener.enterWhereClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWhereClause"):
                listener.exitWhereClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitWhereClause"):
                return visitor.visitWhereClause(self)
            else:
                return visitor.visitChildren(self)

    def whereClause(self):

        localctx = SqlParser.WhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_whereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 232
            self.match(SqlParser.KW_WHERE)
            self.state = 233
            self.searchCondition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SearchConditionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def booleanTerm(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.BooleanTermContext)
            else:
                return self.getTypedRuleContext(SqlParser.BooleanTermContext, i)

        def KW_OR(self, i: int = None):
            if i is None:
                return self.getTokens(SqlParser.KW_OR)
            else:
                return self.getToken(SqlParser.KW_OR, i)

        def getRuleIndex(self):
            return SqlParser.RULE_searchCondition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSearchCondition"):
                listener.enterSearchCondition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSearchCondition"):
                listener.exitSearchCondition(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSearchCondition"):
                return visitor.visitSearchCondition(self)
            else:
                return visitor.visitChildren(self)

    def searchCondition(self):

        localctx = SqlParser.SearchConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_searchCondition)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 235
            self.booleanTerm()
            self.state = 240
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 5:
                self.state = 236
                self.match(SqlParser.KW_OR)
                self.state = 237
                self.booleanTerm()
                self.state = 242
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BooleanTermContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def booleanFactor(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.BooleanFactorContext)
            else:
                return self.getTypedRuleContext(SqlParser.BooleanFactorContext, i)

        def KW_AND(self, i: int = None):
            if i is None:
                return self.getTokens(SqlParser.KW_AND)
            else:
                return self.getToken(SqlParser.KW_AND, i)

        def getRuleIndex(self):
            return SqlParser.RULE_booleanTerm

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBooleanTerm"):
                listener.enterBooleanTerm(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBooleanTerm"):
                listener.exitBooleanTerm(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBooleanTerm"):
                return visitor.visitBooleanTerm(self)
            else:
                return visitor.visitChildren(self)

    def booleanTerm(self):

        localctx = SqlParser.BooleanTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_booleanTerm)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 243
            self.booleanFactor()
            self.state = 248
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 6:
                self.state = 244
                self.match(SqlParser.KW_AND)
                self.state = 245
                self.booleanFactor()
                self.state = 250
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BooleanFactorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return SqlParser.RULE_booleanFactor

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class NegativeBooleanFactorContext(BooleanFactorContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a SqlParser.BooleanFactorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def KW_NOT(self):
            return self.getToken(SqlParser.KW_NOT, 0)

        def booleanTest(self):
            return self.getTypedRuleContext(SqlParser.BooleanTestContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNegativeBooleanFactor"):
                listener.enterNegativeBooleanFactor(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNegativeBooleanFactor"):
                listener.exitNegativeBooleanFactor(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNegativeBooleanFactor"):
                return visitor.visitNegativeBooleanFactor(self)
            else:
                return visitor.visitChildren(self)

    class PositiveBooleanFactorContext(BooleanFactorContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a SqlParser.BooleanFactorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def booleanTest(self):
            return self.getTypedRuleContext(SqlParser.BooleanTestContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPositiveBooleanFactor"):
                listener.enterPositiveBooleanFactor(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPositiveBooleanFactor"):
                listener.exitPositiveBooleanFactor(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPositiveBooleanFactor"):
                return visitor.visitPositiveBooleanFactor(self)
            else:
                return visitor.visitChildren(self)

    def booleanFactor(self):

        localctx = SqlParser.BooleanFactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_booleanFactor)
        try:
            self.state = 254
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                localctx = SqlParser.NegativeBooleanFactorContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 251
                self.match(SqlParser.KW_NOT)
                self.state = 252
                self.booleanTest()
                pass
            elif token in [25, 28, 29, 30, 39, 40, 44, 45]:
                localctx = SqlParser.PositiveBooleanFactorContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 253
                self.booleanTest()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BooleanTestContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return SqlParser.RULE_booleanTest

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class ParenthesisBooleanTestContext(BooleanTestContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a SqlParser.BooleanTestContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_PARENTHESIS(self):
            return self.getToken(SqlParser.OPEN_PARENTHESIS, 0)

        def searchCondition(self):
            return self.getTypedRuleContext(SqlParser.SearchConditionContext, 0)

        def CLOSE_PARENTHESIS(self):
            return self.getToken(SqlParser.CLOSE_PARENTHESIS, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParenthesisBooleanTest"):
                listener.enterParenthesisBooleanTest(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParenthesisBooleanTest"):
                listener.exitParenthesisBooleanTest(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitParenthesisBooleanTest"):
                return visitor.visitParenthesisBooleanTest(self)
            else:
                return visitor.visitChildren(self)

    class PredicateBooleanTestContext(BooleanTestContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a SqlParser.BooleanTestContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(SqlParser.PredicateContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPredicateBooleanTest"):
                listener.enterPredicateBooleanTest(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPredicateBooleanTest"):
                listener.exitPredicateBooleanTest(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPredicateBooleanTest"):
                return visitor.visitPredicateBooleanTest(self)
            else:
                return visitor.visitChildren(self)

    def booleanTest(self):

        localctx = SqlParser.BooleanTestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_booleanTest)
        try:
            self.state = 261
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [25, 28, 29, 30, 39, 44, 45]:
                localctx = SqlParser.PredicateBooleanTestContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 256
                self.predicate()
                pass
            elif token in [40]:
                localctx = SqlParser.ParenthesisBooleanTestContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 257
                self.match(SqlParser.OPEN_PARENTHESIS)
                self.state = 258
                self.searchCondition()
                self.state = 259
                self.match(SqlParser.CLOSE_PARENTHESIS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PredicateContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def containsExpression(self):
            return self.getTypedRuleContext(SqlParser.ContainsExpressionContext, 0)

        def comparisonPredicate(self):
            return self.getTypedRuleContext(SqlParser.ComparisonPredicateContext, 0)

        def betweenPredicate(self):
            return self.getTypedRuleContext(SqlParser.BetweenPredicateContext, 0)

        def inPredicate(self):
            return self.getTypedRuleContext(SqlParser.InPredicateContext, 0)

        def functionExpression(self):
            return self.getTypedRuleContext(SqlParser.FunctionExpressionContext, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_predicate

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPredicate"):
                listener.enterPredicate(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPredicate"):
                listener.exitPredicate(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPredicate"):
                return visitor.visitPredicate(self)
            else:
                return visitor.visitChildren(self)

    def predicate(self):

        localctx = SqlParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_predicate)
        try:
            self.state = 268
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 24, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 263
                self.containsExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 264
                self.comparisonPredicate()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 265
                self.betweenPredicate()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 266
                self.inPredicate()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 267
                self.functionExpression()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ContainsExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CONTAINS(self):
            return self.getToken(SqlParser.KW_CONTAINS, 0)

        def OPEN_PARENTHESIS(self):
            return self.getToken(SqlParser.OPEN_PARENTHESIS, 0)

        def ANY_STRING(self, i: int = None):
            if i is None:
                return self.getTokens(SqlParser.ANY_STRING)
            else:
                return self.getToken(SqlParser.ANY_STRING, i)

        def CLOSE_PARENTHESIS(self):
            return self.getToken(SqlParser.CLOSE_PARENTHESIS, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(SqlParser.COMMA)
            else:
                return self.getToken(SqlParser.COMMA, i)

        def getRuleIndex(self):
            return SqlParser.RULE_containsExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterContainsExpression"):
                listener.enterContainsExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitContainsExpression"):
                listener.exitContainsExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitContainsExpression"):
                return visitor.visitContainsExpression(self)
            else:
                return visitor.visitChildren(self)

    def containsExpression(self):

        localctx = SqlParser.ContainsExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_containsExpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 270
            self.match(SqlParser.KW_CONTAINS)
            self.state = 271
            self.match(SqlParser.OPEN_PARENTHESIS)
            self.state = 272
            self.match(SqlParser.ANY_STRING)
            self.state = 277
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 27:
                self.state = 273
                self.match(SqlParser.COMMA)
                self.state = 274
                self.match(SqlParser.ANY_STRING)
                self.state = 279
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 280
            self.match(SqlParser.CLOSE_PARENTHESIS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComparisonPredicateContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueExpression(self):
            return self.getTypedRuleContext(SqlParser.ValueExpressionContext, 0)

        def COMP_OPERATOR(self):
            return self.getToken(SqlParser.COMP_OPERATOR, 0)

        def literal(self):
            return self.getTypedRuleContext(SqlParser.LiteralContext, 0)

        def EQUALS(self):
            return self.getToken(SqlParser.EQUALS, 0)

        def ANY_STRING(self):
            return self.getToken(SqlParser.ANY_STRING, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_comparisonPredicate

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterComparisonPredicate"):
                listener.enterComparisonPredicate(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitComparisonPredicate"):
                listener.exitComparisonPredicate(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitComparisonPredicate"):
                return visitor.visitComparisonPredicate(self)
            else:
                return visitor.visitChildren(self)

    def comparisonPredicate(self):

        localctx = SqlParser.ComparisonPredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_comparisonPredicate)
        try:
            self.state = 292
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 27, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 282
                self.valueExpression()
                self.state = 283
                self.match(SqlParser.COMP_OPERATOR)
                self.state = 284
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 286
                self.valueExpression()
                self.state = 287
                self.match(SqlParser.EQUALS)
                self.state = 290
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [28, 29, 30, 44, 45]:
                    self.state = 288
                    self.literal()
                    pass
                elif token in [49]:
                    self.state = 289
                    self.match(SqlParser.ANY_STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BetweenPredicateContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlParser.ValueExpressionContext, i)

        def KW_BETWEEN(self):
            return self.getToken(SqlParser.KW_BETWEEN, 0)

        def KW_AND(self):
            return self.getToken(SqlParser.KW_AND, 0)

        def KW_NOT(self):
            return self.getToken(SqlParser.KW_NOT, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_betweenPredicate

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBetweenPredicate"):
                listener.enterBetweenPredicate(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBetweenPredicate"):
                listener.exitBetweenPredicate(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBetweenPredicate"):
                return visitor.visitBetweenPredicate(self)
            else:
                return visitor.visitChildren(self)

    def betweenPredicate(self):

        localctx = SqlParser.BetweenPredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_betweenPredicate)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 294
            self.valueExpression()
            self.state = 296
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 7:
                self.state = 295
                self.match(SqlParser.KW_NOT)

            self.state = 298
            self.match(SqlParser.KW_BETWEEN)
            self.state = 299
            self.valueExpression()
            self.state = 300
            self.match(SqlParser.KW_AND)
            self.state = 301
            self.valueExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InPredicateContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueExpression(self):
            return self.getTypedRuleContext(SqlParser.ValueExpressionContext, 0)

        def KW_IN(self):
            return self.getToken(SqlParser.KW_IN, 0)

        def OPEN_PARENTHESIS(self):
            return self.getToken(SqlParser.OPEN_PARENTHESIS, 0)

        def inValueList(self):
            return self.getTypedRuleContext(SqlParser.InValueListContext, 0)

        def CLOSE_PARENTHESIS(self):
            return self.getToken(SqlParser.CLOSE_PARENTHESIS, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_inPredicate

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInPredicate"):
                listener.enterInPredicate(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInPredicate"):
                listener.exitInPredicate(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInPredicate"):
                return visitor.visitInPredicate(self)
            else:
                return visitor.visitChildren(self)

    def inPredicate(self):

        localctx = SqlParser.InPredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_inPredicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 303
            self.valueExpression()
            self.state = 304
            self.match(SqlParser.KW_IN)
            self.state = 305
            self.match(SqlParser.OPEN_PARENTHESIS)
            self.state = 306
            self.inValueList()
            self.state = 307
            self.match(SqlParser.CLOSE_PARENTHESIS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InValueListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlParser.ValueExpressionContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(SqlParser.COMMA)
            else:
                return self.getToken(SqlParser.COMMA, i)

        def getRuleIndex(self):
            return SqlParser.RULE_inValueList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInValueList"):
                listener.enterInValueList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInValueList"):
                listener.exitInValueList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInValueList"):
                return visitor.visitInValueList(self)
            else:
                return visitor.visitChildren(self)

    def inValueList(self):

        localctx = SqlParser.InValueListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_inValueList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 309
            self.valueExpression()
            self.state = 314
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 27:
                self.state = 310
                self.match(SqlParser.COMMA)
                self.state = 311
                self.valueExpression()
                self.state = 316
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ValueExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleCol(self):
            return self.getTypedRuleContext(SqlParser.SimpleColContext, 0)

        def literal(self):
            return self.getTypedRuleContext(SqlParser.LiteralContext, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_valueExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterValueExpression"):
                listener.enterValueExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitValueExpression"):
                listener.exitValueExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitValueExpression"):
                return visitor.visitValueExpression(self)
            else:
                return visitor.visitChildren(self)

    def valueExpression(self):

        localctx = SqlParser.ValueExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_valueExpression)
        try:
            self.state = 319
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [39]:
                self.enterOuterAlt(localctx, 1)
                self.state = 317
                self.simpleCol()
                pass
            elif token in [28, 29, 30, 44, 45]:
                self.enterOuterAlt(localctx, 2)
                self.state = 318
                self.literal()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LiteralContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signedNumericLiteral(self):
            return self.getTypedRuleContext(SqlParser.SignedNumericLiteralContext, 0)

        def generalLiteral(self):
            return self.getTypedRuleContext(SqlParser.GeneralLiteralContext, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_literal

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLiteral"):
                listener.enterLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLiteral"):
                listener.exitLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLiteral"):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)

    def literal(self):

        localctx = SqlParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_literal)
        try:
            self.state = 323
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [28, 29, 30, 44]:
                self.enterOuterAlt(localctx, 1)
                self.state = 321
                self.signedNumericLiteral()
                pass
            elif token in [45]:
                self.enterOuterAlt(localctx, 2)
                self.state = 322
                self.generalLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GeneralLiteralContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def characterStringLiteral(self):
            return self.getTypedRuleContext(SqlParser.CharacterStringLiteralContext, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_generalLiteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGeneralLiteral"):
                listener.enterGeneralLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGeneralLiteral"):
                listener.exitGeneralLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGeneralLiteral"):
                return visitor.visitGeneralLiteral(self)
            else:
                return visitor.visitChildren(self)

    def generalLiteral(self):

        localctx = SqlParser.GeneralLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_generalLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 325
            self.characterStringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CharacterStringLiteralContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(SqlParser.QUOTED_STRING, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_characterStringLiteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCharacterStringLiteral"):
                listener.enterCharacterStringLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCharacterStringLiteral"):
                listener.exitCharacterStringLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCharacterStringLiteral"):
                return visitor.visitCharacterStringLiteral(self)
            else:
                return visitor.visitChildren(self)

    def characterStringLiteral(self):

        localctx = SqlParser.CharacterStringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_characterStringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 327
            self.match(SqlParser.QUOTED_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SignedNumericLiteralContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sign(self):
            return self.getTypedRuleContext(SqlParser.SignContext, 0)

        def unsignedNumericLiteral(self):
            return self.getTypedRuleContext(SqlParser.UnsignedNumericLiteralContext, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_signedNumericLiteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSignedNumericLiteral"):
                listener.enterSignedNumericLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSignedNumericLiteral"):
                listener.exitSignedNumericLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSignedNumericLiteral"):
                return visitor.visitSignedNumericLiteral(self)
            else:
                return visitor.visitChildren(self)

    def signedNumericLiteral(self):

        localctx = SqlParser.SignedNumericLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_signedNumericLiteral)
        try:
            self.state = 333
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [29, 30]:
                self.enterOuterAlt(localctx, 1)
                self.state = 329
                self.sign()
                self.state = 330
                self.unsignedNumericLiteral()
                pass
            elif token in [28, 44]:
                self.enterOuterAlt(localctx, 2)
                self.state = 332
                self.unsignedNumericLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SignContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS_SIGN(self):
            return self.getToken(SqlParser.PLUS_SIGN, 0)

        def MINUS_SIGN(self):
            return self.getToken(SqlParser.MINUS_SIGN, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_sign

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSign"):
                listener.enterSign(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSign"):
                listener.exitSign(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSign"):
                return visitor.visitSign(self)
            else:
                return visitor.visitChildren(self)

    def sign(self):

        localctx = SqlParser.SignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_sign)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 335
            _la = self._input.LA(1)
            if not (_la == 29 or _la == 30):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnsignedNumericLiteralContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exactNumericLiteral(self):
            return self.getTypedRuleContext(SqlParser.ExactNumericLiteralContext, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_unsignedNumericLiteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnsignedNumericLiteral"):
                listener.enterUnsignedNumericLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnsignedNumericLiteral"):
                listener.exitUnsignedNumericLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUnsignedNumericLiteral"):
                return visitor.visitUnsignedNumericLiteral(self)
            else:
                return visitor.visitChildren(self)

    def unsignedNumericLiteral(self):

        localctx = SqlParser.UnsignedNumericLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_unsignedNumericLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 337
            self.exactNumericLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExactNumericLiteralContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSIGNED_INTEGER(self, i: int = None):
            if i is None:
                return self.getTokens(SqlParser.UNSIGNED_INTEGER)
            else:
                return self.getToken(SqlParser.UNSIGNED_INTEGER, i)

        def PERIOD(self):
            return self.getToken(SqlParser.PERIOD, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_exactNumericLiteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExactNumericLiteral"):
                listener.enterExactNumericLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExactNumericLiteral"):
                listener.exitExactNumericLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExactNumericLiteral"):
                return visitor.visitExactNumericLiteral(self)
            else:
                return visitor.visitChildren(self)

    def exactNumericLiteral(self):

        localctx = SqlParser.ExactNumericLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_exactNumericLiteral)
        try:
            self.state = 345
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 33, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 339
                self.match(SqlParser.UNSIGNED_INTEGER)
                self.state = 340
                self.match(SqlParser.PERIOD)
                self.state = 341
                self.match(SqlParser.UNSIGNED_INTEGER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 342
                self.match(SqlParser.PERIOD)
                self.state = 343
                self.match(SqlParser.UNSIGNED_INTEGER)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 344
                self.match(SqlParser.UNSIGNED_INTEGER)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GroupByClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_GROUP(self):
            return self.getToken(SqlParser.KW_GROUP, 0)

        def KW_BY(self):
            return self.getToken(SqlParser.KW_BY, 0)

        def columnList(self):
            return self.getTypedRuleContext(SqlParser.ColumnListContext, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_groupByClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGroupByClause"):
                listener.enterGroupByClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGroupByClause"):
                listener.exitGroupByClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGroupByClause"):
                return visitor.visitGroupByClause(self)
            else:
                return visitor.visitChildren(self)

    def groupByClause(self):

        localctx = SqlParser.GroupByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_groupByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 347
            self.match(SqlParser.KW_GROUP)
            self.state = 348
            self.match(SqlParser.KW_BY)
            self.state = 349
            self.columnList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColumnListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i: int = None):
            if i is None:
                return self.getTokens(SqlParser.IDENTIFIER)
            else:
                return self.getToken(SqlParser.IDENTIFIER, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(SqlParser.COMMA)
            else:
                return self.getToken(SqlParser.COMMA, i)

        def getRuleIndex(self):
            return SqlParser.RULE_columnList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumnList"):
                listener.enterColumnList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumnList"):
                listener.exitColumnList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitColumnList"):
                return visitor.visitColumnList(self)
            else:
                return visitor.visitChildren(self)

    def columnList(self):

        localctx = SqlParser.ColumnListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_columnList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 351
            self.match(SqlParser.IDENTIFIER)
            self.state = 356
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 27:
                self.state = 352
                self.match(SqlParser.COMMA)
                self.state = 353
                self.match(SqlParser.IDENTIFIER)
                self.state = 358
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OrderByClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ORDER(self):
            return self.getToken(SqlParser.KW_ORDER, 0)

        def KW_BY(self):
            return self.getToken(SqlParser.KW_BY, 0)

        def orderItem(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.OrderItemContext)
            else:
                return self.getTypedRuleContext(SqlParser.OrderItemContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(SqlParser.COMMA)
            else:
                return self.getToken(SqlParser.COMMA, i)

        def getRuleIndex(self):
            return SqlParser.RULE_orderByClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOrderByClause"):
                listener.enterOrderByClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOrderByClause"):
                listener.exitOrderByClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOrderByClause"):
                return visitor.visitOrderByClause(self)
            else:
                return visitor.visitChildren(self)

    def orderByClause(self):

        localctx = SqlParser.OrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_orderByClause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 359
            self.match(SqlParser.KW_ORDER)
            self.state = 360
            self.match(SqlParser.KW_BY)
            self.state = 361
            self.orderItem()
            self.state = 366
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 27:
                self.state = 362
                self.match(SqlParser.COMMA)
                self.state = 363
                self.orderItem()
                self.state = 368
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OrderItemContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SqlParser.IDENTIFIER, 0)

        def orderOption(self):
            return self.getTypedRuleContext(SqlParser.OrderOptionContext, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_orderItem

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOrderItem"):
                listener.enterOrderItem(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOrderItem"):
                listener.exitOrderItem(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOrderItem"):
                return visitor.visitOrderItem(self)
            else:
                return visitor.visitChildren(self)

    def orderItem(self):

        localctx = SqlParser.OrderItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_orderItem)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 369
            self.match(SqlParser.IDENTIFIER)
            self.state = 371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 20 or _la == 21:
                self.state = 370
                self.orderOption()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OrderOptionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_DESC(self):
            return self.getToken(SqlParser.KW_DESC, 0)

        def KW_ASC(self):
            return self.getToken(SqlParser.KW_ASC, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_orderOption

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOrderOption"):
                listener.enterOrderOption(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOrderOption"):
                listener.exitOrderOption(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOrderOption"):
                return visitor.visitOrderOption(self)
            else:
                return visitor.visitChildren(self)

    def orderOption(self):

        localctx = SqlParser.OrderOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_orderOption)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 373
            _la = self._input.LA(1)
            if not (_la == 20 or _la == 21):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimingByClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TIMING(self):
            return self.getToken(SqlParser.KW_TIMING, 0)

        def KW_BY(self):
            return self.getToken(SqlParser.KW_BY, 0)

        def UNSIGNED_INTEGER(self):
            return self.getToken(SqlParser.UNSIGNED_INTEGER, 0)

        def timeSpanUnit(self):
            return self.getTypedRuleContext(SqlParser.TimeSpanUnitContext, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_timingByClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTimingByClause"):
                listener.enterTimingByClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTimingByClause"):
                listener.exitTimingByClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTimingByClause"):
                return visitor.visitTimingByClause(self)
            else:
                return visitor.visitChildren(self)

    def timingByClause(self):

        localctx = SqlParser.TimingByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_timingByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 375
            self.match(SqlParser.KW_TIMING)
            self.state = 376
            self.match(SqlParser.KW_BY)
            self.state = 377
            self.match(SqlParser.UNSIGNED_INTEGER)
            self.state = 378
            self.timeSpanUnit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimeSpanUnitContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEC_TIME_UNIT(self):
            return self.getToken(SqlParser.SEC_TIME_UNIT, 0)

        def MIN_TIME_UNIT(self):
            return self.getToken(SqlParser.MIN_TIME_UNIT, 0)

        def HOUR_TIME_UNIT(self):
            return self.getToken(SqlParser.HOUR_TIME_UNIT, 0)

        def DAY_TIME_UNIT(self):
            return self.getToken(SqlParser.DAY_TIME_UNIT, 0)

        def WEEK_TIME_UNIT(self):
            return self.getToken(SqlParser.WEEK_TIME_UNIT, 0)

        def MONTH_TIME_UNIT(self):
            return self.getToken(SqlParser.MONTH_TIME_UNIT, 0)

        def SUBSECONDS_TIME_UNIT(self):
            return self.getToken(SqlParser.SUBSECONDS_TIME_UNIT, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_timeSpanUnit

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTimeSpanUnit"):
                listener.enterTimeSpanUnit(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTimeSpanUnit"):
                listener.exitTimeSpanUnit(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTimeSpanUnit"):
                return visitor.visitTimeSpanUnit(self)
            else:
                return visitor.visitChildren(self)

    def timeSpanUnit(self):

        localctx = SqlParser.TimeSpanUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_timeSpanUnit)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 380
            _la = self._input.LA(1)
            if not ((((_la) & ~0x3F) == 0 and ((1 << _la) & 545460846592) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LimitClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_LIMIT(self):
            return self.getToken(SqlParser.KW_LIMIT, 0)

        def UNSIGNED_INTEGER(self):
            return self.getToken(SqlParser.UNSIGNED_INTEGER, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_limitClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLimitClause"):
                listener.enterLimitClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLimitClause"):
                listener.exitLimitClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLimitClause"):
                return visitor.visitLimitClause(self)
            else:
                return visitor.visitChildren(self)

    def limitClause(self):

        localctx = SqlParser.LimitClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_limitClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 382
            self.match(SqlParser.KW_LIMIT)
            self.state = 383
            self.match(SqlParser.UNSIGNED_INTEGER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx
